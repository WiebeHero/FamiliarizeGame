local debugger

function init(self)
	if debugger == nil then
		debugger = Debugger:new()
	end
	debugger:printer_init_simple("Starting ingame gui...", true)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	debugger:printer(message_id)
	if message_id == hash("SetCountdown") then
		debugger:printer("Processing " .. message_id .. "...")
		local countdownText = gui.get_node("Countdown")
		gui.set_text(countdownText, tostring(message.Countdown))
	end
	if message_id == hash("CountdownUpdate") then
		debugger:printer("Processing " .. message_id .. "...")
		local countdownText = gui.get_node("Countdown")
		gui.set_text(countdownText, tostring(message.Score))
	end
	if message_id == hash("CountdownVisibility") then
		debugger:printer("Processing " .. message_id .. "...")
		local countdownText = gui.get_node("Countdown")
		if message.Visibility then
			gui.set_alpha(countdownText, 1.0)
		else
			gui.set_alpha(countdownText, 0.0)
		end
	end
	if message_id == hash("ScoreUpdate") then
		
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
