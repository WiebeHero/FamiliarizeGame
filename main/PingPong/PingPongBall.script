go.property("Speed", 0)
go.property("SpeedMultiplier", 0)
local debugger

function init(self)
	if debugger == nil then
		debugger = Debugger:new()
	end
	self.Position = go.get_position()
	debugger:printerinit(self, "Starting ping pong ball script...")
end

function fixed_update(self, dt)
	local collisionUrl = msg.url(nil, nil, "collisionobject")
	local velocity = go.get(collisionUrl, "linear_velocity")
	local newVelocity = velocity * (1 + self.SpeedMultiplier)
	go.set(collisionUrl, "linear_velocity", newVelocity)
end

function on_message(self, message_id, message, sender)
	debugger:printer("Message identification: " .. message_id)
	if message_id == hash("ReleaseBall") then
		local vector3 = vmath.vector3(0, self.Speed, 0)
		local collisionUrl = msg.url(nil, nil, "collisionobject")
		vector3 = rotate_vector(vector3, math.random(180) - 180)
		go.set(collisionUrl, "linear_velocity", vector3)
	end
	if message_id == hash("ResetBall") then
		go.set_position(self.Position)
		local collisionUrl = msg.url(nil, nil, "collisionobject")
		go.set(collisionUrl, "linear_velocity", vmath.vector3(0, 0, 0))
	end
	if message_id ~= hash("contact_point_response") then
		return
	end
	debugger:printer("Other group: " .. tostring(message.other_group))
	if message.other_group ~= hash("Pong") then
		return
	end
	debugger:printer("Collision occured!")
	local collisionUrl = msg.url(nil, nil, "collisionobject")
	local vector3 = go.get(collisionUrl, "linear_velocity")
	debugger:printer("Normal: " .. message.normal)
	math.randomseed(os.time())
	go.set(collisionUrl, "linear_velocity", rotate_vector(message.normal * vmath.length(go.get(collisionUrl, "linear_velocity")), math.random(150) - 75))
end

function rotate_vector(vector3, degrees)
	local degrees = math.rad(degrees)
	local newX = vector3.x * math.cos(degrees) - vector3.y * math.sin(degrees)
	local newY = vector3.x * math.sin(degrees) + vector3.y * math.cos(degrees)
	return vmath.vector3(newX, newY, 0.0)
end