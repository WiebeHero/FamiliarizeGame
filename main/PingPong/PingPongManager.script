--Manages the ping pong scores.
go.property("Countdown", 0.0)
go.property("BallUrl", msg.url())
go.property("GuiUrl", msg.url())
debugger = nil
local scoreLeft, scoreRight

function init(self)
	debugger = Debugger:new()
	debugger:printerinit(self, "Starting ping pong manager...")
	scoreLeft = 0
	scoreRight = 0
	debugger:printer("Ping pong manager started!")
	msg.post(".", "acquire_input_focus")
	msg.post(self.GuiUrl, "SetCountdown", {Countdown = self.Countdown})
	create_countdown_timer(self)
end

function create_countdown_timer(self)
	local originalCountdown = self.Countdown
	msg.post(self.GuiUrl, "CountdownVisibility", {Visibility = true})
	msg.post(self.GuiUrl, "CountdownUpdate", {Score = self.Countdown})
	self.handle = timer.delay(1, true, function ()
		if self.Countdown - 1 <= 0 then
			msg.post(self.GuiUrl, "CountdownVisibility", {Visibility = false})
			msg.post(self.BallUrl, "ReleaseBall")
			self.Countdown = originalCountdown
			timer.cancel(self.handle)
			return
		end
		self.Countdown = self.Countdown - 1
		msg.post(self.GuiUrl, "CountdownUpdate", {Score = self.Countdown})
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("AddScore") then
		local score
		if message.PlayerToAddTo == 1 then
			scoreLeft = scoreLeft + 1
			score = scoreLeft
		end
		if message.PlayerToAddTo == 2 then
			scoreRight = scoreRight + 1
			score = scoreRight
		end
		msg.post(self.GuiUrl, "ScoreUpdate", {PlayerTarget = message.PlayerToAddTo, CurrentScore = score})
		create_countdown_timer(self)
	end
end